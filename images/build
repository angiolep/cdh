#!/usr/bin/env bash

#
# This script builds the Docker images
# for the containerized Cloudera Hadoop cluster
#

# Compute the path to directory that contains this script
readonly selfdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
source $selfdir/functions


function create_network {
  echo " "
  echo "================================================"
  echo "Creating Docker network named ${network}"
  docker network ls | grep ${network} > /dev/null || docker network create ${network} > /dev/null
}


function run_repo_server {
  echo " "
  echo "================================================"
  echo "Spawning Nginx to serve local YUM repositories"
  docker container run --rm -d \
    --name repos \
    --network ${network}  \
    --volume ${selfdir}/../yum/repos:/usr/share/nginx/html \
    nginx
  local status=$?
  if [[ "${status}" -ne 0 ]]; then
    tear_down
    exit ${status}
  fi
}

function destroy {
  local image="${1}"

  # Append the version tag (e.g. 'alpha2' or '1.0') of the Docker images
  local image_version="$cdh_version-$image_patch"

  echo "Removing Docker image ${repository}/${image}:${image_version}"
  docker image rm --force ${registry}/${repository}/${image}:${image_version} > /dev/null 2>&1
  docker image rm --force ${repository}/${image}:${image_version} > /dev/null 2>&1
  docker image prune --force
}


function build {
  local image="${1}"

  # Append the version tag (e.g. 'alpha2' or '1.0') of the Docker images
  local image_version="$cdh_version-$image_patch"

  if [[ "${image}" == "base" ]]; then cat <<CAT > ${selfdir}/base/cdh-${cdh_version}.repo
[cdh-${cdh_version}]
name=Cloudera's Distribution for Hadoop
baseurl=http://repos/cloudera/cdh-${cdh_version}
gpgcheck=0
enabled=1
CAT
  fi

  echo " "
  echo "========================================================="
  echo "Rebuilding Docker image ${repository}/${image}:${image_version}"
  echo " "

  docker image build \
    --network ${network}  \
    --build-arg repository=${repository} \
    --build-arg image_version=${image_version} \
    --build-arg cdh_version=${cdh_version} \
    --file ${selfdir}/${image}/Dockerfile \
    --tag ${repository}/${image}:${image_version} \
    ${selfdir}/${image}

  docker image tag \
    ${repository}/${image}:${image_version} \
    ${registry}/${repository}/${image}:${image_version}

  local status=$?
  if [[ "${status}" -ne 0 ]]; then
    tear_down
    exit ${status}
  fi
}


function tear_down {
  docker container stop repos
  docker container prune --force
  docker image prune --force
  docker network prune  --force
}



# ~~~~~~~~~~~~ M A I N ~~~~~

check_args $*
create_network
run_repo_server
perform destroy
perform build
tear_down

exit 0
