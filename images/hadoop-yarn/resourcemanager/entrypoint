#!/usr/bin/env bash

#
# Setup user accounts with proper ~/.bash_profile
#
chmod +x /etc/docker/setup
# --------------   user   group   domain
/etc/docker/setup  yarn   hadoop  docker.net


#
# Render configuration templates by replacing {{ PLACEHOLDER }}
# with corresponding shell environment variable values
chmod +x /etc/docker/render
/etc/docker/render  /etc/hadoop/conf/core-site.xml
/etc/docker/render  /etc/hadoop/conf/hdfs-site.xml
/etc/docker/render  /etc/hadoop/conf/mapred-site.xml
/etc/docker/render  /etc/hadoop/conf/yarn-site.xml


#
# Make local log directories
#
mkdir -p /var/log/hadoop-yarn
chown -R yarn:yarn /var/log/hadoop-yarn
chmod 755 /var/log/hadoop-yarn
# TODO ln -snf /dev/stdout /var/log/hadoop-yarn/hadoop-yarn-resourcemanager-resourcemanager.docker.net.log



# Wait until namenode service is available
while ! echo exit | nc namenode.docker.net 8020; do sleep 10; done


# IMPORTANT
# ---------
# YARN requires a staging directory for temporary files created by running jobs.
# By default it creates /tmp/hadoop-yarn/staging with restrictive permissions
# that may prevent your users from running jobs. To forestall this, you should
# configure and create the staging directory yourself.
#
# See the yarn.app.mapreduce.am.staging-dir property as set in mapred-site.xml
#
su - yarn <<'EOF'
hadoop fs -mkdir -p /tmp/hadoop-yarn/staging
hadoop fs -chown yarn:hadoop /tmp/hadoop-yarn/staging
hadoop fs -chmod -R 1777 /tmp/hadoop-yarn/staging
EOF



# Start the Hadoop YARN ResourceManager service
service hadoop-yarn-resourcemanager start



# Keep this container running
/etc/docker/idle
